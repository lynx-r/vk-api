var __awaiter=this&&this.__awaiter||function(e,t,s,n){return new(s||(s=Promise))(function(o,r){function i(e){try{u(n.next(e))}catch(e){r(e)}}function a(e){try{u(n.throw(e))}catch(e){r(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof s?t:new s(function(e){e(t)})).then(i,a)}u((n=n.apply(e,t||[])).next())})};import{isVKAPIRequestPerformAllowedMessage}from"./utils";import{Core}from"../../Core";import{PERFORM_REQUEST_EVENT}from"../constants";export class VKAPIConsumer extends Core{constructor(e){if(super(),this.requestId="0",this.sendRequest=(e=>this.instance.sendRequest(e)),this.addRequestToQueue=(e=>{if(!process.send)throw new Error('Unable to process VKAPI request from slave due to there is no "process.send" method available. It looks like it was created in main thread, but not in fork');const t=(parseInt(this.requestId)+1).toString(16),s={tunnelName:this.tunnelName,requestId:t,isVKAPIMessage:!0,type:PERFORM_REQUEST_EVENT};this.requestId=t;const n=new Promise((s,n)=>{const o=r=>__awaiter(this,void 0,void 0,function*(){if(isVKAPIRequestPerformAllowedMessage(r)&&r.tunnelName===this.tunnelName&&r.requestId===t){process.off("message",o);try{s(this.instance.sendRequest(e))}catch(e){n(e)}}});process.on("message",o)});return process.send(s),n}),!process.send)throw new Error('Unable to create VKAPIConsumer due to there is no "process.send" method available. It looks like it was created in main thread, but not in fork.');const{tunnelName:t="",instance:s}=e;this.tunnelName=t,this.instance=s,this.init(this.addRequestToQueue)}addRepository(e,t){return super.addRepository(e,t,this.addRequestToQueue)}}