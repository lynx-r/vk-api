var __awaiter=this&&this.__awaiter||function(e,t,s,n){return new(s||(s=Promise))(function(i,o){function r(e){try{a(n.next(e))}catch(e){o(e)}}function u(e){try{a(n.throw(e))}catch(e){o(e)}}function a(e){var t;e.done?i(e.value):(t=e.value,t instanceof s?t:new s(function(e){e(t)})).then(r,u)}a((n=n.apply(e,t||[])).next())})};import{isVKAPIProcessRequestMessage}from"./utils";import{Queue}from"../../Queue";import{REQUEST_PERFORM_ALLOWED_EVENT}from"../constants";export class VKAPIProvider{constructor(e){const{workers:t,tunnelName:s="",maxProcessEventListenersCount:n,rps:i=3}=e;this.workers=t,this.tunnelName=s,this.queue=new Queue({timeout:Math.ceil(1e3/i)}),"number"==typeof n&&process.setMaxListeners(n)}init(){for(const e of this.workers)e.on("message",t=>__awaiter(this,void 0,void 0,function*(){if(isVKAPIProcessRequestMessage(t)&&this.tunnelName===t.tunnelName){yield this.queue.await();const s={tunnelName:this.tunnelName,requestId:t.requestId,isVKAPIMessage:!0,type:REQUEST_PERFORM_ALLOWED_EVENT};e.send(s)}}))}}