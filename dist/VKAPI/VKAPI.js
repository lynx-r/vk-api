var __awaiter=this&&this.__awaiter||function(e,r,t,o){return new(t||(t=Promise))(function(s,i){function n(e){try{c(o.next(e))}catch(e){i(e)}}function a(e){try{c(o.throw(e))}catch(e){i(e)}}function c(e){var r;e.done?s(e.value):(r=e.value,r instanceof t?r:new t(function(e){e(r)})).then(n,a)}c((o=o.apply(e,r||[])).next())})};import"cross-fetch/polyfill";import{Core}from"../Core";import{Queue}from"../Queue";import{recursiveToCamelCase,recursiveToSnakeCase}from"../utils";import{VKError}from"../VKError";export class VKAPI extends Core{constructor(e={}){super(),this.accessToken=null,this.sendRequest=(e=>__awaiter(this,void 0,void 0,function*(){const{method:r,params:t}=e,o=recursiveToSnakeCase(Object.assign({v:this.v,accessToken:this.accessToken,lang:this.lang},t)),s=Object.entries(o).filter(([,e])=>void 0!==e).map(([e,r])=>{const t="object"==typeof r?JSON.stringify(r):String(r);return encodeURIComponent(e)+"="+encodeURIComponent(t)}).join("&"),i=`${this.baseUrl}/${r}`;if(this.isBrowser)return new Promise((r,t)=>{const o="__vkapicallback"+Math.random().toString().slice(2),n=document.createElement("script");n.src=`${i}?${s}&callback=${o}`,window[o]=(o=>{if(document.head.removeChild(n),null==o?void 0:o.response)return r(recursiveToCamelCase(o.response));t(new VKError({errorInfo:recursiveToCamelCase((null==o?void 0:o.error)||{}),config:e}))}),document.head.appendChild(n)});const n=yield fetch(i,{method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded;charset=UTF-8"},body:s}),a=yield n.json();if("response"in a)return recursiveToCamelCase(a.response);throw new VKError({errorInfo:recursiveToCamelCase((null==a?void 0:a.error)||{}),config:e})})),this.addRequestToQueue=(e=>__awaiter(this,void 0,void 0,function*(){return yield this.queue.await(),this.sendRequest(e)})),this.addRepository=((e,r)=>super.addRepository(e,r,this.addRequestToQueue));const{rps:r=3,accessToken:t,v:o="5.110",lang:s="ru",isBrowser:i=!1,baseUrl:n="https://api.vk.com/method"}=e;this.accessToken=t||null,this.v=o,this.lang=s,this.isBrowser=i,this.queue=new Queue({timeout:Math.ceil(1e3/r)}),this.baseUrl=n.endsWith("/")?n.slice(0,n.length-1):n,this.init(this.addRequestToQueue)}}