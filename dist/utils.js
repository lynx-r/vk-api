function createRecursiveKeysFormatter(e){const o=t=>null===t?null:Array.isArray(t)?t.map(o):"object"==typeof t?Object.keys(t).reduce((r,n)=>(r[e(n)]=o(t[n]),r),{}):t;return o}export function toSnakeCase(e){return e.replace(/[A-Z]/g,e=>`_${e.toLowerCase()}`)}export const recursiveToSnakeCase=createRecursiveKeysFormatter(toSnakeCase);export function toCamelCase(e){return e.replace(/_./g,e=>e.slice(1).toUpperCase())}export const recursiveToCamelCase=createRecursiveKeysFormatter(toCamelCase);export function toPseudoBoolean(e){return e?1:0}export function formatOptionalBoolean(e){return void 0===e?void 0:"boolean"==typeof e?toPseudoBoolean(e):e}export function formatOptionalArray(e){return void 0===e?e:e.join(",")}export function isNonNullObject(e){return"object"==typeof e&&null!==e}